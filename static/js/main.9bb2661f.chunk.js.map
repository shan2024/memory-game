{"version":3,"sources":["components/ScoreBoard.js","components/Shape.js","components/Card.js","components/GameBoard.js","components/GameScreen.js","App.js","index.js"],"names":["ScoreBoard","props","className","id","currentScore","bestScore","Shape","shape","style","backgroundColor","shapeColor","Card","onClick","e","cardClicked","card","GameBoard","useState","returnInitialCards","cards","setCards","usedCards","setUsedCards","initialCards","i","push","Math","floor","random","uniqid","preventDefault","includes","setBestScore","resetCurrentScore","concat","incrementCurrentScore","randomIndex","array","Array","from","currentIndex","length","randomizeCards","map","index","GameScreen","setCurrentScore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAYeA,MAVf,SAAoBC,GAEhB,OACI,sBAAKC,UAAY,cAAjB,UACI,qBAAIC,GAAK,gBAAT,4BAAyCF,EAAMG,gBAC/C,qBAAID,GAAK,aAAT,yBAAmCF,EAAMI,iB,MCKtCC,MAVf,SAAeL,GAEX,OAEI,aADA,CACA,OAAKC,UAAa,SAAUD,EAAMM,MAAOC,OAASP,EAAMM,MAAsB,CAACE,gBAAiBR,EAAMS,gB,MCO/FC,MAXf,SAAcV,GAEV,OACI,qBAAKC,UAAY,iBAAjB,SACA,qBAAMU,QAAW,SAACC,GAAD,OAAOZ,EAAMa,YAAYD,EAAGZ,EAAME,KAAMD,UAAY,OAAOM,MAAQ,CAACC,gBAAkBR,EAAMc,KAAK,IAAlH,SACI,cAAC,EAAD,CAAOR,MAASN,EAAMc,KAAK,GAAKL,WAAcT,EAAMc,KAAK,U,sBCkFtDC,MArFf,SAAmBf,GAEf,MAA4BgB,mBAAUC,KAAtC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAAoCH,mBAAU,IAA9C,mBAAQI,EAAR,KAAmBC,EAAnB,KAEA,SAASJ,IAGL,IADA,IAAIK,EAAe,GACVC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAaE,KAAK,CAAE,OAASC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAC/DF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAClCF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAAK,OAASF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAClFF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAClCF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAClCF,KAAKE,SAAW,IAAM,SAAWF,KAAKE,SAAW,IAAM,SAAW,WAAYC,MAAUL,IAG5F,OAAOD,EAuBX,SAAST,EAAaD,EAAGV,GACrBU,EAAEiB,iBAKGT,EAAUU,SAAU5B,IAEjBF,EAAMG,aAAeH,EAAMI,WAC3BJ,EAAM+B,aAAc/B,EAAMG,cAE9BkB,EAAc,IACdF,EAASF,KACTjB,EAAMgC,sBAKNX,EAAcD,EAAUa,OAAQ/B,IAChCF,EAAMkC,wBAvCd,WAMI,IALA,IAEIC,EAFAC,EAAQC,MAAMC,KAAMpB,GACpBqB,EAAeH,EAAMI,OAIF,GAAhBD,GAAmB,CAGtBJ,EAAcV,KAAKC,MAAMD,KAAKE,SAAWY,GACzCA,IAJsB,MAOsB,CACxCH,EAAMD,GAAcC,EAAMG,IAD7BH,EAAMG,GAPe,KAOAH,EAAMD,GAPN,KAW1BhB,EAAUiB,GAuBNK,GAGwB,IAApBrB,EAAUoB,SAEVnB,EAAa,IACbF,EAASF,OAQrB,OACI,qBAAKhB,UAAY,aAAjB,SACMiB,EAAMwB,KAAK,SAAC5B,EAAM6B,GAChB,OACI,cAAC,EAAD,CAAMzC,GAAOY,EAAK,GAAIA,KAAQA,EAAuBD,YAAgBA,GAAzBC,EAAK,UCtDpD8B,MAxBjB,WAEI,MAAyC5B,mBAAS,GAAlD,mBAAOb,EAAP,KAAqB0C,EAArB,KACA,EAAmC7B,mBAAS,GAA5C,mBAAOZ,EAAP,KAAkB2B,EAAlB,KAYA,OACE,sBAAK9B,UAAU,cAAf,UACE,cAAC,EAAD,CAAYE,aAAgBA,EAAcC,UAAaA,IACvD,cAAC,EAAD,CAAWD,aAAgBA,EAAcC,UAAaA,EAAW8B,sBAbrE,WAEIW,EAAiB1C,EAAe,IAWiF6B,kBARrH,WACIa,EAAgB,IAQhBd,aAAgBA,Q,MCXTe,MAVf,WACE,OACE,sBAAK7C,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,IACA,iECHN8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9bb2661f.chunk.js","sourcesContent":["import \"../styles/ScoreBoard.css\";\n\nfunction ScoreBoard(props) {\n\n    return (\n        <div className = \"score-board\">\n            <h2 id = \"current-score\">Current Score: {props.currentScore}</h2>\n            <h2 id = \"best-score\">Best Score: {props.bestScore}</h2>\n        </div>\n    );\n}\n\nexport default ScoreBoard;","import \"../styles/Shapes.css\";\n\nfunction Shape(props) {\n\n    return (\n        //we create a css file with shape css class, then return that\n        <div className = {\"shape \" +props.shape} style ={ props.shape == \"triangle\" ? {backgroundColor: props.shapeColor}:{ backgroundColor : props.shapeColor}}>\n            {/* <div className = {\"inner-\"+props.shape} style = {{backgroundColor:props.shapeColor}}></div> */}\n        </div>\n    );\n}\n\nexport default Shape;","import Shape from \"./Shape\";\nimport \"../styles/Card.css\";\nfunction Card(props) {\n\n    return (\n        <div className = \"card-container\">\n        <div  onClick = {(e) => props.cardClicked(e, props.id )} className = \"card\" style ={{backgroundColor : props.card[0]}}>\n            <Shape shape = {props.card[2] } shapeColor = {props.card[1]} />\n        </div>\n        </div>\n    );\n}\n\nexport default Card;","import { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport uniqid from \"uniqid\";\nimport \"../styles/GameBoard.css\";\nfunction GameBoard(props) {\n\n    const [ cards, setCards ] = useState( returnInitialCards() );\n    const [ usedCards, setUsedCards ] = useState( [] );\n\n    function returnInitialCards() {\n        \n        let initialCards = [];\n        for (let i = 0; i < 16; i++){\n            initialCards.push([ \"rgb(\" + Math.floor(Math.random() * 256) + \",\" + \n            Math.floor(Math.random() * 256) + \",\" + \n            Math.floor(Math.random() * 256) + \")\", \"rgb(\" + Math.floor(Math.random() * 256) + \",\" + \n            Math.floor(Math.random() * 256) + \",\" + \n            Math.floor(Math.random() * 256) + \")\", \n            Math.random() > .66 ? \"circle\" : Math.random() > .33 ? \"square\" : \"triangle\", uniqid(), i ] );\n        }\n\n        return initialCards;\n    }\n\n    function randomizeCards(){\n        let array = Array.from( cards);\n        let currentIndex = array.length;\n        let randomIndex;\n\n        // While there remain elements to shuffle...\n        while (currentIndex != 0) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        setCards( array);\n    }\n    \n    function cardClicked( e, id) {\n        e.preventDefault();\n        // console.log(id);\n        // console.log(typeof(id));\n        // console.log(usedCards);\n        //setUsedCards( usedCards.concat( \"dfsdf\"));\n        if ( usedCards.includes( id) ) {\n            //uh oh, we messed up\n            if (props.currentScore > props.bestScore) {\n                props.setBestScore( props.currentScore);\n            }\n            setUsedCards( [] );\n            setCards(returnInitialCards());\n            props.resetCurrentScore();\n            //console.log(\"we messed up\");\n        }else {\n            //all  good, keep going\n            \n            setUsedCards( usedCards.concat( id));\n            props.incrementCurrentScore();\n            randomizeCards();\n                //console.log(usedCards);\n\n            if (usedCards.length == 15){\n                //console.log(\"won\");\n                setUsedCards([]);\n                setCards(returnInitialCards());\n            }\n                \n            \n            \n        }\n    }\n\n    return (\n        <div className = \"game-board\"  >\n            { cards.map( (card, index) => {\n                return (\n                    <Card id = { card[4]} card = {card} key = { card[3]} cardClicked = { cardClicked}></Card>\n                );\n            } )   }\n        </div>\n    );\n}\n\nexport default GameBoard;","import ScoreBoard from \"./ScoreBoard\";\nimport GameBoard from \"./GameBoard\";\nimport react, {useState} from \"react\";\n\nfunction GameScreen() {\n\n    const [currentScore, setCurrentScore ] = useState(0);\n    const [bestScore, setBestScore ] = useState(0);\n\n    function incrementCurrentScore( ) {\n\n        setCurrentScore( currentScore + 1);\n    }\n\n    function resetCurrentScore() {\n        setCurrentScore(0);\n    }\n\n\n    return (\n      <div className=\"game-screen\">\n        <ScoreBoard currentScore = {currentScore} bestScore = {bestScore} />\n        <GameBoard currentScore = {currentScore} bestScore = {bestScore} incrementCurrentScore = {incrementCurrentScore} resetCurrentScore = {resetCurrentScore}\n        setBestScore = {setBestScore}/>\n      </div>\n    );\n  }\n  \n  export default GameScreen;","import GameScreen from \"./components/GameScreen\";\nimport \"./styles/App.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>Memorize</header>\n      <GameScreen/>\n      <footer>Created By Seulchan Han</footer>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}